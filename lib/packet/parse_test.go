package packet

import (
	"fmt"
	"testing"
)

// Should produce a parser error:
// c0 loops back to header start
func TestCompressionLoop(t *testing.T) {
	buf := []byte{
		0x01, 0x64, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x66, 0x61, 0x63,
		0x65, 0x62, 0x6f, 0x6f, 0x6b, 0xc0, 0x0c,
		0x00, 0x01, 0x00, 0x01}
	_, err := Parse(buf)
	if err == nil {
		panic(fmt.Errorf("Expected an unparseable packet"))
	}
}

// Uncommon but parseable: Jumps < 12
func TestCompressionHdrJmp(t *testing.T) {
	buf := []byte{
		0x01, 0x64, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0x02,
		0x00, 0x01, 0x00, 0x01}

	b, err := Parse(buf)
	if err != nil {
		panic(err)
	}
	if len(b.Questions) != 1 {
		panic(fmt.Errorf("Invalid question count, expected 1, got %d\n", len(b.Questions)))
	}
	if b.Questions[0].Name.Len() != 2 {
		panic(fmt.Errorf("Invalid name parsed: %v\n", b.Questions[0].Name))
	}
}

// Jumps forward from 12 -> 13: not allowed
func TestCompressionFwdJmp(t *testing.T) {
	buf := []byte{
		0x01, 0x64, 0x01, 0x20, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xc0, 0x0d,
		0x00, 0x01, 0x00, 0x01}

	_, err := Parse(buf)
	if err == nil {
		panic(fmt.Errorf("Expected an unparseable packet"))
	}
}

// A real packet, as sent by 192.5.5.241
func TestSanity(t *testing.T) {
	buf := []byte{
		0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x0d, 0x00, 0x0b, 0x36, 0x75, 0x7a, 0x35,
		0x6d, 0x6e, 0x76, 0x38, 0x6e, 0x34, 0x64, 0x7a,
		0x72, 0x70, 0x39, 0x35, 0x7a, 0x6c, 0x35, 0x30,
		0x6a, 0x72, 0x79, 0x62, 0x34, 0x77, 0x67, 0x66,
		0x34, 0x35, 0x6d, 0x79, 0x32, 0x37, 0x71, 0x36,
		0x70, 0x76, 0x78, 0x38, 0x66, 0x35, 0x34, 0x30,
		0x6c, 0x39, 0x73, 0x73, 0x70, 0x6b, 0x63, 0x77,
		0x76, 0x74, 0x6d, 0x05, 0x6e, 0x73, 0x7a, 0x68,
		0x31, 0x04, 0x65, 0x71, 0x6d, 0x78, 0x03, 0x6e,
		0x65, 0x74, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0,
		0x4e, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0xa3,
		0x00, 0x00, 0x11, 0x01, 0x69, 0x0c, 0x67, 0x74,
		0x6c, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
		0x72, 0x73, 0xc0, 0x4e, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x6b, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x67, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x66, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x6a, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x64, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x6d, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x6c, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x61, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x63, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x65, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x62, 0xc0, 0x65, 0xc0, 0x4e, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0x01, 0x68, 0xc0, 0x65, 0xc0, 0xf0, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x05, 0x06, 0x1e, 0xc0, 0xf0, 0x00, 0x1c,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x10,
		0x20, 0x01, 0x05, 0x03, 0xa8, 0x3e, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30,
		0xc1, 0x20, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02,
		0xa3, 0x00, 0x00, 0x04, 0xc0, 0x21, 0x0e, 0x1e,
		0xc1, 0x20, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x02,
		0xa3, 0x00, 0x00, 0x10, 0x20, 0x01, 0x05, 0x03,
		0x23, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x02, 0x00, 0x30, 0xc1, 0x00, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x1a, 0x5c, 0x1e, 0xc0, 0xc0, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x1f, 0x50, 0x1e, 0xc1, 0x10, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x0c, 0x5e, 0x1e, 0xc0, 0xa0, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x23, 0x33, 0x1e, 0xc0, 0x90, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x2a, 0x5d, 0x1e, 0xc1, 0x30, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x36, 0x70, 0x1e, 0xc0, 0x63, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x04,
		0xc0, 0x2b, 0xac, 0x1e}

	v, err := Parse(buf)
	if err != nil {
		panic(err)
	}
	if v.Header.AdditionalCount != 11 {
		panic(fmt.Errorf("Expected 11 additionals"))
	}
	if int(v.Header.AdditionalCount) != len(v.Additionals) {
		panic(fmt.Errorf("Additionals mismatch!"))
	}
}
